HOOKS
  -Los hooks son funciones que puedes llamar dentro de componentes funcio
  nales para agregar y manipular características de React, como el estado, 
  el ciclo de vida y los efectos secundarios. 
  
  -Los hooks más comunes son useState, useEffect y useContext, pero 
  también puedes crear tus propios hooks personalizados.

  Los Hooks son más restrictivos que las funciones regulares. Solo puedes 
  llamar a los Hooks en el primer nivel de tus componentes (u otros Hooks).
  Si quisieras utilizar useState en una condicional o en un bucle, 
  extrae un nuevo componente y ponlo ahí.

CUSTOM HOOKS

  Permite: compartir logica entre componentes y tener el codigo del 
  componente como tal mucho mas limpio
  
  Al abstraer usando Hooks nos facilita la lectura del codigo, teniendo 
  las partes que le competen al componente en una seccion y las partes de 
  la funcionalidad del hook en otra diferente.
  Cuando vale la pena implementarlo? Bajo nuestro criterio cuando veamos 
  necesario abstraer una logica.

 **useEffect

  Los efectos son una herramienta, específicamente un react hook que nos 
  permiten ejecutar cierta parte del código de nuestros componentes para 
  que no se ejecuten cada vez que hacemos render de nuestro componente, 
  sino, dependiendo de ciertas condiciones.

  el react hook llamado “React.useEffect” ejecuta el código que le 
  enviemos no después de renderizar el componente sino justo antes, 
  cuando react ya tiene todo preparado para renderizar. 
    Si queremos ejecutarlo después de que se hizo el render usamos 
    “React.useLayoutEffect” (en caso de eventos, event listeners o cosas 
    por el estilo).
  
  Se ejecuta antes de hacer el render, de transformar react a html 
  cuando ya react termino de hacer todos sus cálculos internos.

  -Podemos enviar un array vacío para decirle a nuestro efecto solo se 
  ejecute una vez, cuando recién hacemos el primer render de nuestro 
  componente.
  -O también podemos enviar un array con distintos elementos para decirle
   a nuestro efecto que no solo ejecute el efecto en el primer render, 
   sino también cuando haya cambios en esos elementos del array.
  
  -Si no enviamos ningún array como segundo argumento de nuestro efecto, 
  esta función se ejecutará cada vez que nuestro componente haga render 
  (es decir, cada vez que haya cambios en cualquiera de nuestros estados).

  ***React.Context****
    -Prop Drilling: es una paso del desarrollo que ocurre cuando necesita
      mos obtener datos que están en varias capas en el árbol de componentes 
      React.

      Este se ve siempre cuando pasamos props entre hijos, luego ese a otros 
      hijos y así sucesivamente… la solución es usar context:

***Context: 
    es un elemento que podemos crear en React para establecer
    una comunicación directa entre un componente en un nivel muy alto 
    y uno en un nivel mucho más bajo.

    Por ende context permite acceder a los valores de forma directa.  

    El contexto permite que un componente proporcione información a 
    todo el árbol debajo de él.

      Para pasar contexto:
        -Créelo y expórtelo con export const 
            MyContext = createContext(defaultValue).
        
        -Pásalo al useContext(MyContext)Hook para leerlo en cualquier 
        componente hijo, sin importar cuán profundo sea.
        
        -Envuelva a los children <MyContext.Provider value={...}>
        para proporcionarlo de un padre.
        
        -El contexto pasa a través de cualquier componente en el medio.
        
        -El contexto le permite escribir componentes que "se adaptan a su 
        entorno".
        
        -Antes de usar el contexto, intente pasar accesorios o pasar JSX 
        como children.

